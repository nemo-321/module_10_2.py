# Импортируем модули`threading`для работы с потоками и`time`для управления
# временем (в частности, чтобы задерживать выполнение кода).
import threading
import time
#  Класс `Knight`, который наследует от `Thread`, и запускает два потока, представляющих рыцарей, сражающихся с врагами.
class Knight(threading.Thread):
    # Инициализация атрибутов
    # Метод `init инициализирует атрибуты объекта:
    #`name` — имя рыцаря.
    # `power` — сила рыцаря (сколько врагов он может повергнуть за один "день" сражения).
    #`enemies` — количество врагов, изначально 100.
    # `days` — счётчик дней сражения, начинаем с 0.
    def __init__(self,name,power):
        super().__init__()
        self.name=name
        self.power=power
        self.enemies=100
        self.days=0
    # Метод `run`
    # Когда поток запускается, вызывается этот метод.
    # Сначала выводится сообщение о том, что на рыцаря напали.
    # Затем запускается цикл, который продолжается, пока есть враги (`self.enemies > 0`):
    # `time.sleep(1)` — задержка на 1 секунду, чтобы имитировать "день" сражения.
    #  Увеличивается счётчик дней.
    #  Уменьшается количество врагов на силу рыцаря.
    #  Если количество врагов становится отрицательным, устанавливаем его в 0.
    #  Выводится сообщение о текущем состоянии сражения.
    #  Когда все враги повержены, выводится сообщение о победе.
    def run(self):
        print(f'{self.name} на нас напали!')
        while self.enemies > 0:
            time.sleep(1)
            self.days += 1
            self.enemies -= self.power
            if self.enemies < 0:
                self.enemies=0
            print(f'{self.name} сражается { self.days} день(дня)...,осталось { self.enemies} воинов.')
        print(f'{self.name} одержал победу спустя {self.days} дней(дня).')
# Создаются два объекта класса `Knight` с разными именами и силами.
first_knight = Knight('Sir Lancelot', 10)
second_knight = Knight("Sir Galahad", 20)
# Метод `start()` запускает потоки, и каждый рыцарь начинает сражение.
first_knight.start()
second_knight.start()
# Метод `join()` заставляет основной поток (где этот код выполняется) ждать, пока оба потока не завершат свою работу.
first_knight.join()
second_knight.join()
print(f'Все битвы закончились!')




